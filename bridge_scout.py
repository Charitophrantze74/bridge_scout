#!/usr/bin/env python3
"""
BridgeScout ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—Ä–æ—Å—Å-—á–µ–π–Ω –º–∞—Ä—à—Ä—É—Ç–æ–≤ —á–µ—Ä–µ–∑ Li.Fi API.
"""

import os
import sys
import requests
from decimal import Decimal

API_URL = os.getenv("LIFI_API_URL", "https://li.quest/v1/quote")
FROM_CHAIN = os.getenv("FROM_CHAIN")      # –Ω–∞–ø—Ä–∏–º–µ—Ä "ethereum"
TO_CHAIN   = os.getenv("TO_CHAIN")        # –Ω–∞–ø—Ä–∏–º–µ—Ä "polygon"
FROM_TOKEN = os.getenv("FROM_TOKEN")      # –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Å–∏–º–≤–æ–ª (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç API)
TO_TOKEN   = os.getenv("TO_TOKEN")        # –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Å–∏–º–≤–æ–ª
AMOUNT     = os.getenv("AMOUNT")          # –≤ –±–∞–∑–æ–≤–æ–π –µ–¥–∏–Ω–∏—Ü–µ (wei –¥–ª—è ETH-–ø–æ–¥–æ–±–Ω—ã—Ö)

def fetch_routes():
    params = {
        "fromChain": FROM_CHAIN,
        "toChain": TO_CHAIN,
        "fromToken": FROM_TOKEN,
        "toToken": TO_TOKEN,
        "fromAmount": AMOUNT
    }
    r = requests.get(API_URL, params=params, timeout=10)
    r.raise_for_status()
    return r.json().get("routes", [])

def human_amount(amount_str, decimals):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ Decimal —Å —É—á—ë—Ç–æ–º decimals."""
    return Decimal(amount_str) / (Decimal(10) ** decimals)

def main():
    missing = [v for v in ("FROM_CHAIN","TO_CHAIN","FROM_TOKEN","TO_TOKEN","AMOUNT") if not os.getenv(v)]
    if missing:
        print(f"‚ùó –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        sys.exit(1)

    print(f"üîç –ó–∞–ø—Ä–æ—Å –º–∞—Ä—à—Ä—É—Ç–æ–≤: {FROM_TOKEN}@{FROM_CHAIN} ‚Üí {TO_TOKEN}@{TO_CHAIN}, amount={AMOUNT}")
    try:
        routes = fetch_routes()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e)
        sys.exit(1)

    if not routes:
        print("–ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º–æ–π —Å—É–º–º–µ
    sorted_routes = sorted(
        routes,
        key=lambda r: Decimal(r["toAmount"]),
        reverse=True
    )

    print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(sorted_routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤. –¢–æ–ø‚Äë5 –ø–æ –ø–æ–ª—É—á–∞–µ–º–æ–π —Å—É–º–º–µ:")
    for idx, route in enumerate(sorted_routes[:5], start=1):
        in_amt     = human_amount(route["fromAmount"], route["fromToken"]["decimals"])
        out_amt    = human_amount(route["toAmount"],   route["toToken"]["decimals"])
        protocols  = "‚Üí".join([step["tool"] for step in route.get("steps",[])])
        gas_cost   = Decimal(route.get("estimate",{}).get("gasCostUSD", "0"))
        print(f"{idx}. {protocols}")
        print(f"    send {in_amt} {route['fromToken']['symbol']} ‚Üí get {out_amt} {route['toToken']['symbol']}")
        print(f"    estimated time: {route.get('estimate',{}).get('time', '?')}s, gas cost ‚âà ${gas_cost:.2f}\n")

if __name__ == "__main__":
    main()
